import React from 'react';

// Table de correspondance simplifi√©e qui utilise juste le nom sans pr√©fixe
export const simpleIconMap = {
  // Intuition
  'Lightbulb': 'üí°',
  'ThoughtBubble': 'üí≠',
  'Brain': 'üß†',
  'Compass': 'üß≠',
  'Magic': '‚ú®',
  
  // √Ä retenir
  'Bookmark': 'üîñ',
  'Check': '‚úì',
  'Star': '‚≠ê',
  'Exclamation': '‚ùó',
  'Memory': 'üß†',
  
  // Vulgarisation
  'Comment': 'üí¨',
  'InfoCircle': '‚ÑπÔ∏è',
  'QuestionCircle': '‚ùì',
  'Glasses': 'üëì',
  'HandPointRight': 'üëâ',
  
  // R√©cap
  'ClipboardList': 'üìã',
  'ListAlt': 'üìÑ',
  'Tasks': '‚úì',
  'FileAlt': 'üìù',
  'ChartBar': 'üìä',
};

// Extraire le nom de l'ic√¥ne √† partir du code FontAwesome
export const extractIconName = (code) => {
  if (!code) return '';
  
  // Supprimer les backslashes et le pr√©fixe "fa"
  // Par exemple, transformer '\faLightbulb' en 'Lightbulb'
  const clean = code.replace(/^\\*fa/i, '');
  return clean;
};

// Composant d√©di√© pour afficher une ic√¥ne
export const IconDisplay = ({ iconCode }) => {
  if (!iconCode) return <>‚Ä¢</>;
  
  // Obtenir le nom de l'ic√¥ne
  const iconName = extractIconName(iconCode);
  
  // Obtenir l'emoji correspondant au nom
  const iconEmoji = simpleIconMap[iconName] || '‚Ä¢';
  
  return <>{iconEmoji}</>;
};

// Fonction utilitaire pour obtenir l'affichage d'une ic√¥ne sous forme de cha√Æne
export const getIconDisplay = (iconCode) => {
  if (!iconCode) return '‚Ä¢';

  // Obtenir le nom de l'ic√¥ne
  const iconName = extractIconName(iconCode);
  
  // Retourner l'emoji correspondant ou un point par d√©faut
  return simpleIconMap[iconName] || '‚Ä¢';
};

// Version compatible avec l'ancien iconMap pour √©viter les erreurs
export const iconMap = {};
Object.keys(simpleIconMap).forEach(key => {
  // Cr√©er des entr√©es pour diff√©rentes variations de syntaxe
  iconMap[`\\fa${key}`] = simpleIconMap[key];
  iconMap[`\\\\fa${key}`] = simpleIconMap[key];
  iconMap[`fa${key}`] = simpleIconMap[key];
});

export default IconDisplay;
